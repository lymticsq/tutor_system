# Generated by Django 4.2.7 on 2024-01-03 15:18

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("admin", "管理员"),
                            ("teacher", "教师"),
                            ("student", "学生"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "role_id",
                    models.IntegerField(blank=True, null=True, verbose_name="教师或学生ID"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="课程名称")),
                ("subject", models.CharField(max_length=100, verbose_name="科目")),
                ("level", models.CharField(max_length=50, verbose_name="级别")),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="课程说明"
                    ),
                ),
                ("class_hour", models.IntegerField(verbose_name="课时")),
                ("start_time", models.DateField(verbose_name="开课时间")),
                ("end_time", models.DateField(verbose_name="结课时间")),
                ("create_time", models.DateTimeField(verbose_name="创建时间")),
            ],
        ),
        migrations.CreateModel(
            name="Rating",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("target_id", models.IntegerField(verbose_name="被评价用户ID")),
                ("rating_id", models.IntegerField(verbose_name="评价用户ID")),
                ("rating", models.SmallIntegerField(verbose_name="评分")),
                ("comment", models.TextField(verbose_name="评论内容")),
                ("create_time", models.DateTimeField(verbose_name="创建时间")),
            ],
        ),
        migrations.CreateModel(
            name="Schedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("teacher_id", models.IntegerField(verbose_name="教师ID")),
                ("student_id", models.IntegerField(verbose_name="学生ID")),
                ("course_id", models.IntegerField(verbose_name="课程ID")),
                ("location", models.CharField(max_length=100, verbose_name="上课地点")),
                ("start_time", models.DateTimeField(verbose_name="上课时间")),
                ("end_time", models.DateTimeField(verbose_name="结束时间")),
                ("create_time", models.DateTimeField(verbose_name="创建时间")),
            ],
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="姓名")),
                (
                    "gender",
                    models.SmallIntegerField(
                        choices=[(1, "男"), (2, "女")], default="", verbose_name="性别"
                    ),
                ),
                ("age", models.SmallIntegerField(default=0, verbose_name="年龄")),
                (
                    "grade",
                    models.SmallIntegerField(
                        choices=[
                            (1, "小学一年级"),
                            (2, "小学二年级"),
                            (3, "小学三年级"),
                            (4, "小学四年级"),
                            (5, "小学五年级"),
                            (6, "小学六年级"),
                            (7, "初一"),
                            (8, "初二"),
                            (9, "初三"),
                            (10, "高一"),
                            (11, "高二"),
                            (12, "高三"),
                            (13, "大学生"),
                        ],
                        default="",
                        verbose_name="当前年级",
                    ),
                ),
                (
                    "subject",
                    models.SmallIntegerField(
                        choices=[
                            (1, "语文"),
                            (2, "数学"),
                            (3, "英语"),
                            (4, "物理"),
                            (5, "化学"),
                            (6, "政治"),
                            (7, "历史"),
                            (8, "地理"),
                            (9, "生物"),
                            (10, "考研课程"),
                        ],
                        default="",
                        verbose_name="辅导科目",
                    ),
                ),
                (
                    "region",
                    models.CharField(default="", max_length=64, verbose_name="所在区域"),
                ),
                (
                    "time",
                    models.CharField(
                        blank=True, max_length=64, null=True, verbose_name="授课时间"
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="学生情况"
                    ),
                ),
                (
                    "teacher_gender",
                    models.SmallIntegerField(
                        choices=[(1, "男"), (2, "女")], default="", verbose_name="教师性别"
                    ),
                ),
                (
                    "fee",
                    models.IntegerField(blank=True, null=True, verbose_name="课时费用"),
                ),
                (
                    "number",
                    models.IntegerField(blank=True, null=True, verbose_name="授课次数"),
                ),
                (
                    "identity",
                    models.CharField(
                        blank=True, max_length=64, null=True, verbose_name="身份要求"
                    ),
                ),
                (
                    "require",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="家教要求"
                    ),
                ),
                (
                    "create_time",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="创建时间"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Teacher",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="姓名")),
                (
                    "gender",
                    models.SmallIntegerField(
                        choices=[(1, "男"), (2, "女")], default="", verbose_name="性别"
                    ),
                ),
                ("age", models.IntegerField(default="", verbose_name="年龄")),
                (
                    "education",
                    models.SmallIntegerField(
                        choices=[(1, "大专"), (2, "本科"), (3, "研究生"), (4, "博士")],
                        default="",
                        verbose_name="学历",
                    ),
                ),
                ("birthday", models.DateField(default="", verbose_name="出生日期")),
                (
                    "graduate",
                    models.CharField(default="", max_length=100, verbose_name="毕业院校"),
                ),
                (
                    "time",
                    models.CharField(
                        blank=True, max_length=64, null=True, verbose_name="授课时间"
                    ),
                ),
                (
                    "major",
                    models.CharField(default="", max_length=64, verbose_name="所学专业"),
                ),
                (
                    "experience",
                    models.SmallIntegerField(
                        choices=[
                            (1, "一年以下"),
                            (2, "二年"),
                            (3, "三年"),
                            (4, "四年"),
                            (5, "五年"),
                            (6, "六年"),
                            (7, "七年"),
                            (8, "八年"),
                            (9, "九年"),
                            (10, "十年及以上"),
                        ],
                        default=0,
                        verbose_name="教学经验(年)",
                    ),
                ),
                (
                    "region",
                    models.CharField(default="", max_length=64, verbose_name="所在区域"),
                ),
                (
                    "grade",
                    models.SmallIntegerField(
                        choices=[
                            (1, "小学一年级"),
                            (2, "小学二年级"),
                            (3, "小学三年级"),
                            (4, "小学四年级"),
                            (5, "小学五年级"),
                            (6, "小学六年级"),
                            (7, "初一"),
                            (8, "初二"),
                            (9, "初三"),
                            (10, "高一"),
                            (11, "高二"),
                            (12, "高三"),
                            (13, "大学生"),
                        ],
                        default="",
                        verbose_name="可授年级",
                    ),
                ),
                (
                    "subject",
                    models.SmallIntegerField(
                        choices=[
                            (1, "语文"),
                            (2, "数学"),
                            (3, "英语"),
                            (4, "物理"),
                            (5, "化学"),
                            (6, "政治"),
                            (7, "历史"),
                            (8, "地理"),
                            (9, "生物"),
                            (10, "考研课程"),
                        ],
                        default="",
                        verbose_name="教授科目",
                    ),
                ),
                (
                    "fee",
                    models.IntegerField(blank=True, null=True, verbose_name="课时费用"),
                ),
                (
                    "method",
                    models.SmallIntegerField(
                        choices=[
                            (1, "一对一家教上门"),
                            (2, "一对多家教上门"),
                            (3, "机构小班授课"),
                            (4, "机构大班授课"),
                            (5, "远程网络授课"),
                        ],
                        default="",
                        verbose_name="授课方式",
                    ),
                ),
                (
                    "regions",
                    models.CharField(default="", max_length=64, verbose_name="可授课区域"),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="简历描述"
                    ),
                ),
                (
                    "create_time",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="创建时间"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TeachingResource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("teacher_id", models.IntegerField(verbose_name="教师ID")),
                ("name", models.CharField(max_length=255, verbose_name="资源名称")),
                (
                    "type",
                    models.CharField(max_length=50, verbose_name="资源类型(教材、习题、资源等)"),
                ),
                ("path", models.CharField(max_length=255, verbose_name="文件路径")),
                ("create_time", models.DateTimeField(verbose_name="创建时间")),
            ],
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message", models.TextField(verbose_name="消息内容")),
                ("send_time", models.DateTimeField(verbose_name="发送时间")),
                ("is_read", models.BooleanField(verbose_name="是否已读")),
                (
                    "receiver",
                    models.ManyToManyField(
                        related_name="received_notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
